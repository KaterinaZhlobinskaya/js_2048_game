{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nfunction $a5fd07fa01589658$var$copyState(state) {\n    return state.map((row)=>[\n            ...row\n        ]);\n}\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.state = $a5fd07fa01589658$var$copyState(initialState);\n        this.initialState = $a5fd07fa01589658$var$copyState(initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    randomNum() {\n        const keys = Object.entries(this.state.flat()).filter(([, value])=>value === 0).map(([key])=>key);\n        if (keys.length === 0) return;\n        const index = keys[Math.floor(Math.random() * keys.length)];\n        const rowKey = Math.floor(index / this.state.length);\n        const columnKey = index % this.state.length;\n        const num = Math.random() >= 0.9 ? 4 : 2;\n        this.state[rowKey][columnKey] = num;\n    }\n    mergeArr(arr, inverse = false) {\n        if (inverse) {\n            for(let i = arr.length - 1; i > 0; i--){\n                if (arr[i] !== 0) for(let j = i - 1; j >= 0; j--){\n                    if (arr[i] === arr[j]) {\n                        arr[i] *= 2;\n                        arr[j] = 0;\n                        this.score += arr[i];\n                        break;\n                    } else if (arr[i] !== arr[j] && arr[j]) break;\n                }\n            }\n            for(let i = arr.length - 1; i > 0; i--)if (arr[i] === 0) {\n                for(let j = i - 1; j >= 0; j--)if (arr[j] !== 0) {\n                    arr[i] = arr[j];\n                    arr[j] = 0;\n                    break;\n                }\n            }\n        } else {\n            for(let i = 0; i < arr.length - 1; i++){\n                if (arr[i] !== 0) for(let j = i + 1; j < arr.length; j++){\n                    if (arr[i] === arr[j]) {\n                        arr[i] *= 2;\n                        arr[j] = 0;\n                        this.score += arr[i];\n                        break;\n                    } else if (arr[i] !== arr[j] && arr[j]) break;\n                }\n            }\n            for(let i = 0; i < arr.length; i++)if (arr[i] === 0) {\n                for(let j = i + 1; j < arr.length; j++)if (arr[j] !== 0) {\n                    arr[i] = arr[j];\n                    arr[j] = 0;\n                    break;\n                }\n            }\n        }\n    }\n    mergeColumn(index, inverse = false) {\n        const column = this.state.map((row)=>row[index]);\n        this.mergeArr(column, inverse);\n        this.state.forEach((row, rowIndex)=>{\n            row[index] = column[rowIndex];\n        });\n    }\n    mergeRow(index, inverse = false) {\n        const row = this.state[index];\n        this.mergeArr(row, inverse);\n    }\n    getStrState() {\n        return this.getState().flat().join();\n    }\n    moveIfPlaying(callback) {\n        if (this.status === \"playing\") {\n            const state = this.getStrState();\n            for(let i = 0; i < this.state.length; i++)callback(i);\n            if (state !== this.getStrState()) this.randomNum();\n        }\n    }\n    moveLeft() {\n        this.moveIfPlaying((i)=>this.mergeRow(i));\n    }\n    moveRight() {\n        this.moveIfPlaying((i)=>this.mergeRow(i, true));\n    }\n    moveUp() {\n        this.moveIfPlaying((i)=>this.mergeColumn(i));\n    }\n    moveDown() {\n        this.moveIfPlaying((i)=>this.mergeColumn(i, true));\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.status === \"idle\") return \"idle\";\n        if (this.state.flat().findIndex((el)=>el === 2048) !== -1) return \"win\";\n        const copy = new $a5fd07fa01589658$var$Game($a5fd07fa01589658$var$copyState(this.state));\n        copy.status = \"playing\";\n        copy.moveDown();\n        copy.moveLeft();\n        copy.moveRight();\n        copy.moveUp();\n        if (copy.getScore() === 0 && this.state.flat().findIndex((el)=>el === 0) === -1) return \"lose\";\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.randomNum();\n        this.randomNum();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = $a5fd07fa01589658$var$copyState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button.button\");\nconst $09e991522ca7e64e$var$rows = document.querySelectorAll(\".field-row\");\nconst $09e991522ca7e64e$var$renderCurrentState = ()=>{\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let i = 0; i < state.length; i++)for(let j = 0; j < state.length; j++){\n        const number = state[i][j];\n        const cell = $09e991522ca7e64e$var$rows.item(i).children.item(j);\n        cell.className = \"field-cell\";\n        cell.textContent = \"\";\n        if (number !== 0) {\n            cell.classList.add(`field-cell--${number}`);\n            cell.textContent = number;\n        }\n    }\n};\nconst $09e991522ca7e64e$var$updateGameScore = (newScore)=>{\n    $09e991522ca7e64e$var$gameScore.innerText = newScore;\n    $09e991522ca7e64e$var$gameScore.value = newScore;\n};\ndocument.addEventListener(\"keydown\", ({ key: key })=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") return;\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        if (key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n        if (key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n        if (key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n        if (key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n        $09e991522ca7e64e$var$renderCurrentState();\n    }\n    $09e991522ca7e64e$var$updateGameScore($09e991522ca7e64e$var$game.getScore());\n});\nconst $09e991522ca7e64e$var$setGame = ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$renderCurrentState();\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n};\nconst $09e991522ca7e64e$var$resetGame = ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$renderCurrentState();\n    $09e991522ca7e64e$var$updateGameScore($09e991522ca7e64e$var$game.getScore());\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n};\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ({ target: target })=>{\n    $09e991522ca7e64e$var$resetGame();\n    $09e991522ca7e64e$var$setGame();\n    target.classList.remove(\"start\");\n    target.classList.add(\"restart\");\n    target.innerText = \"Restart\";\n    target.style.fontSize = \"17px\";\n});\n\n\n//# sourceMappingURL=index.42c01dac.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst button = document.querySelector('button.button');\nconst rows = document.querySelectorAll('.field-row');\n\nconst renderCurrentState = () => {\n  const state = game.getState();\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = 0; j < state.length; j++) {\n      const number = state[i][j];\n      const cell = rows.item(i).children.item(j);\n\n      cell.className = 'field-cell';\n      cell.textContent = '';\n\n      if (number !== 0) {\n        cell.classList.add(`field-cell--${number}`);\n        cell.textContent = number;\n      }\n    }\n  }\n};\n\nconst updateGameScore = (newScore) => {\n  gameScore.innerText = newScore;\n  gameScore.value = newScore;\n};\n\ndocument.addEventListener('keydown', ({ key }) => {\n  if (game.getStatus() === 'idle') {\n    return;\n  }\n\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === 'playing') {\n    if (key === 'ArrowLeft') {\n      game.moveLeft();\n    }\n\n    if (key === 'ArrowRight') {\n      game.moveRight();\n    }\n\n    if (key === 'ArrowUp') {\n      game.moveUp();\n    }\n\n    if (key === 'ArrowDown') {\n      game.moveDown();\n    }\n\n    renderCurrentState();\n  }\n\n  updateGameScore(game.getScore());\n});\n\nconst setGame = () => {\n  game.start();\n  renderCurrentState();\n\n  messageStart.classList.add('hidden');\n};\n\nconst resetGame = () => {\n  game.restart();\n  renderCurrentState();\n  updateGameScore(game.getScore());\n\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n};\n\nbutton.addEventListener('click', ({ target }) => {\n  resetGame();\n  setGame();\n\n  target.classList.remove('start');\n  target.classList.add('restart');\n  target.innerText = 'Restart';\n  target.style.fontSize = '17px';\n});\n","'use strict';\n\nfunction copyState(state) {\n  return state.map(row => [...row]);\n}\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ]) {\n    this.state = copyState(initialState);\n    this.initialState = copyState(initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  randomNum() {\n    const keys = Object\n      .entries(this.state.flat())\n      .filter(([, value]) => value === 0)\n      .map(([key]) => key);\n\n    if (keys.length === 0) {\n      return;\n    }\n\n    const index = keys[Math.floor(Math.random() * keys.length)];\n    const rowKey = Math.floor(index / this.state.length);\n    const columnKey = index % this.state.length;\n    const num = Math.random() >= 0.9 ? 4 : 2;\n\n    this.state[rowKey][columnKey] = num;\n  }\n  mergeArr(arr, inverse = false) {\n    if (inverse) {\n      for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] !== 0) {\n          for (let j = i - 1; j >= 0; j--) {\n            if (arr[i] === arr[j]) {\n              arr[i] *= 2;\n              arr[j] = 0;\n              this.score += arr[i];\n\n              break;\n            } else if (arr[i] !== arr[j] && arr[j]) {\n              break;\n            }\n          }\n        }\n      }\n\n      for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] === 0) {\n          for (let j = i - 1; j >= 0; j--) {\n            if (arr[j] !== 0) {\n              arr[i] = arr[j];\n              arr[j] = 0;\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] !== 0) {\n          for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] === arr[j]) {\n              arr[i] *= 2;\n              arr[j] = 0;\n              this.score += arr[i];\n\n              break;\n            } else if (arr[i] !== arr[j] && arr[j]) {\n              break;\n            }\n          }\n        }\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n          for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] !== 0) {\n              arr[i] = arr[j];\n              arr[j] = 0;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  mergeColumn(index, inverse = false) {\n    const column = this.state.map(row => row[index]);\n\n    this.mergeArr(column, inverse);\n\n    this.state.forEach((row, rowIndex) => {\n      row[index] = column[rowIndex];\n    });\n  }\n  mergeRow(index, inverse = false) {\n    const row = this.state[index];\n\n    this.mergeArr(row, inverse);\n  }\n  getStrState() {\n    return this.getState().flat().join();\n  }\n  moveIfPlaying(callback) {\n    if (this.status === 'playing') {\n      const state = this.getStrState();\n\n      for (let i = 0; i < this.state.length; i++) {\n        callback(i);\n      }\n\n      if (state !== this.getStrState()) {\n        this.randomNum();\n      }\n    }\n  }\n  moveLeft() {\n    this.moveIfPlaying((i) => this.mergeRow(i));\n  }\n  moveRight() {\n    this.moveIfPlaying((i) => this.mergeRow(i, true));\n  }\n  moveUp() {\n    this.moveIfPlaying((i) => this.mergeColumn(i));\n  }\n  moveDown() {\n    this.moveIfPlaying((i) => this.mergeColumn(i, true));\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.status === 'idle') {\n      return 'idle';\n    }\n\n    if (this.state.flat().findIndex(el => el === 2048) !== -1) {\n      return 'win';\n    }\n\n    const copy = new Game(copyState(this.state));\n\n    copy.status = 'playing';\n    copy.moveDown();\n    copy.moveLeft();\n    copy.moveRight();\n    copy.moveUp();\n\n    if (copy.getScore() === 0\n      && this.state.flat().findIndex(el => el === 0) === -1) {\n      return 'lose';\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.randomNum();\n    this.randomNum();\n\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = copyState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$copyState","state","map","row","$a5fd07fa01589658$var$Game","constructor","initialState","score","status","randomNum","keys","Object","entries","flat","filter","value","key","length","index","Math","floor","random","rowKey","columnKey","mergeArr","arr","inverse","i","j","mergeColumn","column","forEach","rowIndex","mergeRow","getStrState","getState","join","moveIfPlaying","callback","moveLeft","moveRight","moveUp","moveDown","getScore","getStatus","findIndex","el","copy","start","restart","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$gameScore","document","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$rows","querySelectorAll","$09e991522ca7e64e$var$renderCurrentState","number","cell","item","children","className","textContent","classList","add","$09e991522ca7e64e$var$updateGameScore","newScore","innerText","addEventListener","remove","$09e991522ca7e64e$var$setGame","$09e991522ca7e64e$var$resetGame","target","style","fontSize"],"version":3,"file":"index.42c01dac.js.map"}